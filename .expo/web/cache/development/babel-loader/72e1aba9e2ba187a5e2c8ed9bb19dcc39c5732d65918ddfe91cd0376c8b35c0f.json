{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { fetchGet } from \"../../../services/WebServiceConsumer\";\nexport var fetchPatientsByDoctorId = function () {\n  var _ref = _asyncToGenerator(function* (doctorId, token) {\n    try {\n      return yield fetchGet(`patients/${doctorId}/patients-by-doctor`, token);\n    } catch (error) {\n      console.error('Error fetching patients by doctor ID:', error);\n      throw error;\n    }\n  });\n  return function fetchPatientsByDoctorId(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var fetchPatientDetails = function () {\n  var _ref2 = _asyncToGenerator(function* (patientId, token) {\n    try {\n      return yield fetchGet(`patients/${patientId}`, token);\n    } catch (error) {\n      console.error('Error fetching patient details:', error);\n      throw error;\n    }\n  });\n  return function fetchPatientDetails(_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var searchPatients = function () {\n  var _ref3 = _asyncToGenerator(function* (searchParams, token) {\n    try {\n      var queryParams = new URLSearchParams(searchParams).toString();\n      return yield fetchGet(`patients/search?${queryParams}`, token);\n    } catch (error) {\n      console.error('Error searching patients:', error);\n      throw error;\n    }\n  });\n  return function searchPatients(_x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var fetchMedicalRecords = function () {\n  var _ref4 = _asyncToGenerator(function* (patientId, token) {\n    try {\n      return yield fetchGet(`medical-records/patient/${patientId}`, token);\n    } catch (error) {\n      console.error('Error fetching medical records:', error);\n      throw error;\n    }\n  });\n  return function fetchMedicalRecords(_x7, _x8) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var fetchAppointments = function () {\n  var _ref5 = _asyncToGenerator(function* (patientId, token) {\n    try {\n      return yield fetchGet(`appointments/patient/${patientId}`, token);\n    } catch (error) {\n      console.error('Error fetching appointments:', error);\n      throw error;\n    }\n  });\n  return function fetchAppointments(_x9, _x10) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var fetchDoctorAppointments = function () {\n  var _ref6 = _asyncToGenerator(function* (doctorId, token) {\n    try {\n      return yield fetchGet(`appointments/doctor/${doctorId}`, token);\n    } catch (error) {\n      console.error('Error fetching doctor appointments:', error);\n      throw error;\n    }\n  });\n  return function fetchDoctorAppointments(_x11, _x12) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var getPatientsInAgenda = function () {\n  var _ref7 = _asyncToGenerator(function* (doctorId, date, starttime, endtime, token) {\n    try {\n      return yield fetchGet(`patients/agenda?doctorId=${doctorId}&date=${date}&starttime=${starttime}&endtime=${endtime}`, token);\n    } catch (error) {\n      console.error('Error fetching doctor appointments:', error);\n      throw error;\n    }\n  });\n  return function getPatientsInAgenda(_x13, _x14, _x15, _x16, _x17) {\n    return _ref7.apply(this, arguments);\n  };\n}();\nexport var getServiceList = function () {\n  var _ref8 = _asyncToGenerator(function* (token) {\n    try {\n      return yield fetchGet(`doctors/specialty`, token);\n    } catch (error) {\n      console.error('Error fetching specialty:', error);\n      throw error;\n    }\n  });\n  return function getServiceList(_x18) {\n    return _ref8.apply(this, arguments);\n  };\n}();\nexport var getDoctorList = function () {\n  var _ref9 = _asyncToGenerator(function* (specialty, token) {\n    try {\n      return yield fetchGet(`doctors/${specialty}`, token);\n    } catch (error) {\n      console.error('Error fetching doctors:', error);\n      throw error;\n    }\n  });\n  return function getDoctorList(_x19, _x20) {\n    return _ref9.apply(this, arguments);\n  };\n}();\nexport var fetchTreatmentsByPatientId = function () {\n  var _ref10 = _asyncToGenerator(function* (patientId, token) {\n    try {\n      return yield fetchGet(`treatments/patient/${patientId}`, token);\n    } catch (error) {\n      console.error('Error fetching treatments by patient ID:', error);\n      throw error;\n    }\n  });\n  return function fetchTreatmentsByPatientId(_x21, _x22) {\n    return _ref10.apply(this, arguments);\n  };\n}();\nexport var fetchPrescriptionsByTreatmentId = function () {\n  var _ref11 = _asyncToGenerator(function* (treatmentId, token) {\n    try {\n      return yield fetchGet(`prescriptions/treatment/${treatmentId}`, token);\n    } catch (error) {\n      console.error('Error fetching prescriptions by treatment ID:', error);\n      throw error;\n    }\n  });\n  return function fetchPrescriptionsByTreatmentId(_x23, _x24) {\n    return _ref11.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["fetchGet","fetchPatientsByDoctorId","_ref","_asyncToGenerator","doctorId","token","error","console","_x","_x2","apply","arguments","fetchPatientDetails","_ref2","patientId","_x3","_x4","searchPatients","_ref3","searchParams","queryParams","URLSearchParams","toString","_x5","_x6","fetchMedicalRecords","_ref4","_x7","_x8","fetchAppointments","_ref5","_x9","_x10","fetchDoctorAppointments","_ref6","_x11","_x12","getPatientsInAgenda","_ref7","date","starttime","endtime","_x13","_x14","_x15","_x16","_x17","getServiceList","_ref8","_x18","getDoctorList","_ref9","specialty","_x19","_x20","fetchTreatmentsByPatientId","_ref10","_x21","_x22","fetchPrescriptionsByTreatmentId","_ref11","treatmentId","_x23","_x24"],"sources":["C:/Users/littl/Desktop/saeapp/frontend/src/features/patients/services/patientsService.js"],"sourcesContent":["// patientsService.js\r\nimport { fetchGet } from '../../../services/WebServiceConsumer';\r\n\r\nexport const fetchPatientsByDoctorId = async (doctorId, token) => {\r\n    try {\r\n        return await fetchGet(`patients/${doctorId}/patients-by-doctor`, token);\r\n    } catch (error) {\r\n        console.error('Error fetching patients by doctor ID:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const fetchPatientDetails = async (patientId, token) => {\r\n    try {\r\n        return await fetchGet(`patients/${patientId}`, token);\r\n    } catch (error) {\r\n        console.error('Error fetching patient details:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const searchPatients = async (searchParams, token) => {\r\n    try {\r\n        const queryParams = new URLSearchParams(searchParams).toString();\r\n        return await fetchGet(`patients/search?${queryParams}`, token);\r\n    } catch (error) {\r\n        console.error('Error searching patients:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Fetch medical records for a specific patient\r\nexport const fetchMedicalRecords = async (patientId, token) => {\r\n    try {\r\n        // Assuming your endpoint to fetch medical records by patient ID follows this pattern\r\n        return await fetchGet(`medical-records/patient/${patientId}`, token);\r\n    } catch (error) {\r\n        console.error('Error fetching medical records:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Fetch appointments for a specific patient\r\nexport const fetchAppointments = async (patientId, token) => {\r\n    try {\r\n        // Assuming your endpoint to fetch appointments by patient ID follows this pattern\r\n        // Note: Adjust the endpoint as per your actual API design\r\n        return await fetchGet(`appointments/patient/${patientId}`, token);\r\n    } catch (error) {\r\n        console.error('Error fetching appointments:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const fetchDoctorAppointments = async (doctorId, token) => {\r\n    try {\r\n        return await fetchGet(`appointments/doctor/${doctorId}`, token);\r\n    } catch (error) {\r\n        console.error('Error fetching doctor appointments:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport const getPatientsInAgenda = async (doctorId, date, starttime, endtime, token) => {\r\n    try {\r\n        return await fetchGet(`patients/agenda?doctorId=${doctorId}&date=${date}&starttime=${starttime}&endtime=${endtime}`, token);\r\n    }\r\n    catch (error) {\r\n        console.error('Error fetching doctor appointments:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport const getServiceList = async (token) => {\r\n    try {\r\n        return await fetchGet(`doctors/specialty`, token);\r\n    } catch (error) {\r\n        console.error('Error fetching specialty:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport const getDoctorList = async (specialty, token) => {\r\n    try {\r\n        return await fetchGet(`doctors/${specialty}`, token);\r\n    } catch (error) {\r\n        console.error('Error fetching doctors:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport const fetchTreatmentsByPatientId = async (patientId, token) => {\r\n    try {\r\n        return await fetchGet(`treatments/patient/${patientId}`, token);\r\n    } catch (error) {\r\n        console.error('Error fetching treatments by patient ID:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const fetchPrescriptionsByTreatmentId = async (treatmentId, token) => {\r\n    try {\r\n        return await fetchGet(`prescriptions/treatment/${treatmentId}`, token);\r\n    } catch (error) {\r\n        console.error('Error fetching prescriptions by treatment ID:', error);\r\n        throw error;\r\n    }\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}