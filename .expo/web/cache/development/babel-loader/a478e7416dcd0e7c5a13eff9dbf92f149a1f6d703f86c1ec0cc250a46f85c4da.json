{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar API_URL = \"http://10.0.2.2:3000\";\nvar getAuthToken = function () {\n  var _ref = _asyncToGenerator(function* (username, password) {\n    console.log('getAuthToken : ' + username + ' ' + password);\n    try {\n      var response = yield fetch(`${API_URL}/users/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username: username,\n          password: password\n        })\n      });\n      var json = yield response.json();\n      console.log('getAuthToken : ' + json.token);\n      if (response.ok) {\n        console.log(\"Token received: \", json.token);\n        return json.token;\n      } else {\n        throw new Error(json.message || \"Failed to login\");\n      }\n    } catch (error) {\n      console.error('Error fetching auth token:', error);\n      throw error;\n    }\n  });\n  return function getAuthToken(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar fetchGet = function () {\n  var _ref2 = _asyncToGenerator(function* (endpoint, token) {\n    try {\n      var response = yield fetch(`${API_URL}/${endpoint}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      var text = yield response.text();\n      try {\n        return JSON.parse(text);\n      } catch (e) {\n        console.error(`Error parsing JSON: ${e}`);\n        throw new Error('Failed to parse JSON response');\n      }\n    } catch (error) {\n      console.error(`Error in GET request to ${endpoint}:`, error);\n      throw error;\n    }\n  });\n  return function fetchGet(_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar fetchPost = function () {\n  var _ref3 = _asyncToGenerator(function* (endpoint, data, token) {\n    try {\n      var response = yield fetch(`${API_URL}/${endpoint}`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n      return yield response.json();\n    } catch (error) {\n      console.error(`Error in POST request to ${endpoint}:`, error);\n      throw error;\n    }\n  });\n  return function fetchPost(_x5, _x6, _x7) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport { getAuthToken, fetchGet, fetchPost };","map":{"version":3,"names":["API_URL","getAuthToken","_ref","_asyncToGenerator","username","password","console","log","response","fetch","method","headers","body","JSON","stringify","json","token","ok","Error","message","error","_x","_x2","apply","arguments","fetchGet","_ref2","endpoint","status","text","parse","e","_x3","_x4","fetchPost","_ref3","data","_x5","_x6","_x7"],"sources":["C:/Users/littl/Desktop/saeapp/frontend/src/services/WebServiceConsumer.js"],"sourcesContent":["const API_URL = \"http://10.0.2.2:3000\";\r\n\r\n// Function to log in and get the authentication token\r\nconst getAuthToken = async (username, password) => {\r\n   console.log('getAuthToken : ' + username + ' ' + password);\r\n    try {\r\n        let response = await fetch(`${API_URL}/users/login`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ username, password })\r\n        });\r\n        let json = await response.json();\r\n        console.log('getAuthToken : ' + json.token);\r\n        \r\n        \r\n        if (response.ok) {\r\n            console.log(\"Token received: \", json.token); \r\n            return json.token; \r\n        } else {\r\n            throw new Error(json.message || \"Failed to login\");\r\n        }\r\n    } catch (error) {\r\n        console.error('Error fetching auth token:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Fetch data using GET method\r\nconst fetchGet = async (endpoint, token) => {\r\n    try {\r\n        const response = await fetch(`${API_URL}/${endpoint}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`,\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n\r\n        // Check for HTTP errors\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n\r\n        const text = await response.text(); // Read response body as text\r\n\r\n        // Attempt to parse the text as JSON\r\n        try {\r\n            return JSON.parse(text);\r\n        } catch (e) {\r\n            console.error(`Error parsing JSON: ${e}`);\r\n            throw new Error('Failed to parse JSON response');\r\n        }\r\n    } catch (error) {\r\n        console.error(`Error in GET request to ${endpoint}:`, error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n\r\n// Post data using POST method\r\nconst fetchPost = async (endpoint, data, token) => {\r\n    try {\r\n        const response = await fetch(`${API_URL}/${endpoint}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`,\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(data),\r\n        });\r\n        \r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error(`Error in POST request to ${endpoint}:`, error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport { getAuthToken, fetchGet, fetchPost };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}