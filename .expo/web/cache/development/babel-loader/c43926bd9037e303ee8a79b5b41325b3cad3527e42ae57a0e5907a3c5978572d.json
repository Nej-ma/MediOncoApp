{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { fetchPatientDetails } from \"../features/patients/services/patientsService\";\nimport * as AuthService from \"../features/authentication/services/authService\";\nvar getUsername = function () {\n  var _ref = _asyncToGenerator(function* () {\n    try {\n      var username = yield AuthService.getStoredUserInfoString();\n      return username;\n    } catch (error) {\n      console.error('Error getting username:', error);\n      return null;\n    }\n  });\n  return function getUsername() {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar getRecentPatientsKey = function () {\n  var _ref2 = _asyncToGenerator(function* () {\n    return 'recent_patients_' + (yield getUsername());\n  });\n  return function getRecentPatientsKey() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getRecentPatients = function () {\n  var _ref3 = _asyncToGenerator(function* (token) {\n    try {\n      var RECENT_PATIENTS_KEY = yield getRecentPatientsKey();\n      var patientIdsString = yield AsyncStorage.getItem(RECENT_PATIENTS_KEY);\n      var patientIds = patientIdsString ? JSON.parse(patientIdsString) : [];\n      var patientDetailsPromises = patientIds.map(function (patientId) {\n        return fetchPatientDetails(patientId, token);\n      });\n      var patientsDetails = yield Promise.all(patientDetailsPromises);\n      return patientsDetails.filter(function (patient) {\n        return patient;\n      });\n    } catch (error) {\n      console.error('Error fetching recent patients:', error);\n      return [];\n    }\n  });\n  return function getRecentPatients(_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var addRecentPatient = function () {\n  var _ref4 = _asyncToGenerator(function* (patientId) {\n    try {\n      var RECENT_PATIENTS_KEY = yield getRecentPatientsKey();\n      var patientIdsString = yield AsyncStorage.getItem(RECENT_PATIENTS_KEY);\n      var patientIds = patientIdsString ? JSON.parse(patientIdsString) : [];\n      if (patientIds.includes(patientId)) {\n        patientIds = patientIds.filter(function (id) {\n          return id !== patientId;\n        });\n      }\n      patientIds = [patientId].concat(_toConsumableArray(patientIds.slice(0, 4)));\n      yield AsyncStorage.setItem(RECENT_PATIENTS_KEY, JSON.stringify(patientIds));\n    } catch (error) {\n      console.error('Error adding recent patient:', error);\n    }\n  });\n  return function addRecentPatient(_x2) {\n    return _ref4.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["AsyncStorage","fetchPatientDetails","AuthService","getUsername","_ref","_asyncToGenerator","username","getStoredUserInfoString","error","console","apply","arguments","getRecentPatientsKey","_ref2","getRecentPatients","_ref3","token","RECENT_PATIENTS_KEY","patientIdsString","getItem","patientIds","JSON","parse","patientDetailsPromises","map","patientId","patientsDetails","Promise","all","filter","patient","_x","addRecentPatient","_ref4","includes","id","concat","_toConsumableArray","slice","setItem","stringify","_x2"],"sources":["C:/Users/littl/Desktop/saeapp/frontend/src/utils/storage.js"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { fetchPatientDetails } from '../features/patients/services/patientsService';\r\nimport * as AuthService from '../features/authentication/services/authService';\r\n\r\n\r\nconst getUsername = async () => {\r\n  try {\r\n    const username = await AuthService.getStoredUserInfoString();\r\n    return username;\r\n  } catch (error) {\r\n    console.error('Error getting username:', error);\r\n    return null;\r\n  }\r\n};\r\nconst getRecentPatientsKey = async () => {\r\n  return 'recent_patients_' + await getUsername();\r\n};\r\n\r\nexport const getRecentPatients = async (token) => {\r\n  try {\r\n    const RECENT_PATIENTS_KEY = await getRecentPatientsKey();\r\n    const patientIdsString = await AsyncStorage.getItem(RECENT_PATIENTS_KEY);\r\n    const patientIds = patientIdsString ? JSON.parse(patientIdsString) : [];\r\n    const patientDetailsPromises = patientIds.map(patientId => fetchPatientDetails(patientId, token));\r\n    const patientsDetails = await Promise.all(patientDetailsPromises);\r\n    return patientsDetails.filter(patient => patient);\r\n  } catch (error) {\r\n    console.error('Error fetching recent patients:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const addRecentPatient = async (patientId) => {\r\n  try {\r\n    const RECENT_PATIENTS_KEY = await getRecentPatientsKey();\r\n    const patientIdsString = await AsyncStorage.getItem(RECENT_PATIENTS_KEY);\r\n    let patientIds = patientIdsString ? JSON.parse(patientIdsString) : [];\r\n    if (patientIds.includes(patientId)) {\r\n      // Remove the patientId from the current position\r\n      patientIds = patientIds.filter(id => id !== patientId);\r\n    }\r\n    // Add the patientId to the top of the list\r\n    patientIds = [patientId, ...patientIds.slice(0, 4)];\r\n    await AsyncStorage.setItem(RECENT_PATIENTS_KEY, JSON.stringify(patientIds));\r\n  } catch (error) {\r\n    console.error('Error adding recent patient:', error);\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}